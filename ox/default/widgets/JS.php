<?php
/**
 *    Copyright (c) 2012 Lunar Logic LLC
 *
 *    This program is free software: you can redistribute it and/or  modify
 *    it under the terms of the GNU Affero General Public License, version 3,
 *    as published by the Free Software Foundation.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Affero General Public License for more details.
 *
 *    You should have received a copy of the GNU Affero General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @copyright Copyright (c) 2012 Lunar Logic LLC
 * @license http://www.gnu.org/licenses/agpl-3.0.html AGPLv3
 * @package Ox_Widgets
 */

/**
 * Widget JS
 * This widget Allows you to add javascript files from anywhere in your code and then have it added
 * in a layout (or anywhere)
 * 
 * Use the methods that are appended with '_cachebust' to have the benefits of cache-busting. These methods will
 * only work for files located in webroot/js.
 *
 * To set:
 * <code>
 * $widget_handler=Ox_LibraryLoader::Widget_Handler();
 * $widget_handler->JS->add_cachebust("tag-it.js"); // set a simple js from /js/tag-it.js
 *</code>
 * To display:
 * <code>
 * Ox_WidgetHandler::JS();
 * </code>
 *
 * @package Ox_Widgets
 */
class JS implements Ox_Widget {
    /**
     * @var array Array of javascript file names.
     */
    private $_js_file_list = array();
    /**
     * @var array Array of javascript code to put in the ready area.
     */
    private $_js_jQuery_ready_list = array();
    /**
     * @var array Array of javascript code to put in the load area.
     */
    private $_js_jQuery_load_list = array();
    /**
     * @var array Array of javascript that does not need to be in a document ready area.
     */
    private $_js_script_list = array();
    /**
     * @var string The base address for the javascript calls.
     *
     * This is used in conjunction with the code that is generated by the user.
     */
    private $_pageBase = '';

    /**
     * Create script tags for the list of js files.
     *
     * @param bool $return_string
     * @return string
     */
    public function render($return_string = FALSE)
    {
        $output = '';
        if (!empty($this->_pageBase)) {
            $output .= <<<JS
<script>
    var pageBase = '{$this->_pageBase}';
</script>

JS;
        }

        $appWebBase = Ox_LibraryLoader::Config_Parser()->getAppConfigValue(Ox_Dispatch::CONFIG_WEB_BASE_NAME);
        foreach ($this->_js_file_list as $js_file => $js_options) {
            $type = '';
            if (isset($js_options['type']) && $js_options['type']!==FALSE) {
                $type = " type=\"{$js_options['type']}\" ";
            }
            $charset = '';
            if (isset($js_options['charset']) && $js_options['charset']!==FALSE) {
                $charset = " charset=\"{$js_options['charset']}\" ";
            }
            $async = '';
            if (isset($js_options['async']) && $js_options['async']) {
                $async = " async ";
            }
            $defer = '';
            if (isset($js_options['defer']) && $js_options['defer']) {
                $async = " defer ";
            }

            $file = $js_file;
            $url = Ox_Router::buildURL($js_options['directory'].$file);
            
            if (isset($js_options['cachebust']) && $js_options['cachebust']) {
                if (strpos($url, '://') == false && strlen($this->_pageBase) == 0) {
                    Ox_LibraryLoader::loadCode('WidgetHelper', array(__DIR__.DIRECTORY_SEPARATOR));
                    $url = WidgetHelper::addCacheBuster($url);
                }
            }
            //$directory = $appWebBase . $js_options['directory'];
            $output .= "<script src=\"{$url}\"{$type}{$charset}{$async}{$defer}></script>\n";
        }
        
        if (count($this->_js_script_list)) {
            $output .= "<script>\n";
            foreach ($this->_js_script_list as $id => $script) {
                $output .= "    /*<!-- Script ID: {$id} -->*/\n";
                $output .= "    " . $script;
                $output .= "\n";
            }
            $output .= "</script>\n";
        }

        if (count($this->_js_jQuery_ready_list)) {
            $output .= "<script>\n";
            $output .= '$(document).ready(function() {' . "\n";
            foreach ($this->_js_jQuery_ready_list as $id => $script) {
                $output .= "    /*<!-- Script ID: {$id} -->*/\n";
                $output .= "    " . $script;
                $output .= "\n";
            }
            $output .= "});\n";
            $output .= "</script>\n";
        }
        
        if (count($this->_js_jQuery_load_list)) {
            $output .= "<script>\n";
            $output .= '$(window).load(function() {' . "\n";
            foreach ($this->_js_jQuery_load_list as $id => $script) {
                $output .= "    /*<!-- Script ID: {$id} -->*/\n";
                $output .= "    " . $script;
                $output .= "\n";
            }
            $output .= "});\n";
            $output .= "</script>\n";
        }

        if ($return_string === FALSE) {
            print $output;
        } else {
            return $output;
        }
    }

    /**
     * Add file to the top of the JS list with cache busting.
     * Assumes the file is located in /webroot/js/.
     *
     * @param string $path the web path relative to /js/
     * @param bool $type 
     * @param bool $charset
     */
    public function add_to_top_cachebust($path,$type=FALSE,$charset=FALSE)
    {
        $options = array('directory'=>'/js/','type'=>$type,'charset'=>$charset,'cachebust'=>TRUE);
        if (isset($this->_js_file_list[$path])) {
            $this->_js_file_list[$file] = $options;
        } else {
            $new = array($path => $options);
            $this->_js_file_list = array_merge($new,$this->_js_file_list);
        }
    }

    /**
     * Add file to the bottom of the JS list with cache busting.
     * Assumes the file is located in /webroot/js/.
     *
     * @param string $path the web path relative to /js/
     * @param bool $type 
     * @param bool $charset
     */
    public function add_to_bottom_cachebust($path,$type=FALSE,$charset=FALSE)
    {
        $options = array('directory'=>'/js/','type'=>$type,'charset'=>$charset,'cachebust'=>TRUE);
        $new = array($path => $options);
        //This will overwrite if the same file is used twice.
        $this->_js_file_list = array_merge($this->_js_file_list,$new);
    }

    /**
     * Add file to the bottom of the JS list with cache busting.
     * Assumes the file is located in /webroot/js/.
     *
     * @param string $path the web path relative to /js/
     * @param bool $type 
     * @param bool $charset
     */
    public function add_cachebust($path,$type=FALSE,$charset=FALSE)
    {
        $this->add_to_bottom_cachebust($path,$type,$charset);
    }

    /**
     * Add file to the top of the JS list.
     *
     * @param $file
     * @param string $directory
     * @param bool $type
     * @param bool $charset
     * @return void
     * @internal param bool $media
     * @deprecated
     */
    public function add_to_top($file,$directory='/js/',$type=FALSE,$charset=FALSE)
    {
        $options = array('directory'=>$directory,'type'=>$type,'charset'=>$charset);
        if (isset($this->_js_file_list[$file])) {
            $this->_js_file_list[$file] = $options;
        } else {
            $new = array($file => $options);
            $this->_js_file_list = array_merge($new,$this->_js_file_list);
        }
    }

    /**
     * Add file to the bottom of the JS list.
     *
     * @param $file
     * @param string $directory
     * @param bool $type
     * @param bool $charset
     * @deprecated
     */
    public function add_to_bottom($file,$directory='/js/',$type=FALSE,$charset=FALSE)
    {
        $options = array('directory'=>$directory,'type'=>$type,'charset'=>$charset);
        $new = array($file => $options);
        //This will overwrite if the same file is used twice.
        $this->_js_file_list = array_merge($this->_js_file_list,$new);
    }

    /**
     * Add file to the bottom of the JS list.
     *
     * @param $file
     * @param string $directory
     * @param bool $type
     * @param bool $charset
     * @return void
     * @internal param bool $media
     * @deprecated
     */
    public function add($file,$directory='/js/',$type=FALSE,$charset=FALSE)
    {
        $this->add_to_bottom($file,$directory,$type,$charset);
    }

    /**
     * Add an async file to the bottom of the JS list.
     *
     * @param $file
     * @param string $directory
     * @param bool $type
     * @param bool $charset
     * @deprecated
     */
     public function add_async($file,$directory='/js/',$type=FALSE,$charset=FALSE)
     {
         $options = array('directory'=>$directory,'type'=>$type,'charset'=>$charset,'async'=>TRUE);
         $new = array($file => $options);
         //This will overwrite if the same file is used twice.
         $this->_js_file_list = array_merge($this->_js_file_list,$new);
     }

     /**
     * Add a defer file to the bottom of the JS list.
     *
     * @param $file
     * @param string $directory
     * @param bool $type
     * @param bool $charset
     * @deprecated
     */
     public function add_defer($file,$directory='/js/',$type=FALSE,$charset=FALSE)
     {
         $options = array('directory'=>$directory,'type'=>$type,'charset'=>$charset,'defer'=>TRUE);
         $new = array($file => $options);
         //This will overwrite if the same file is used twice.
         $this->_js_file_list = array_merge($this->_js_file_list,$new);
     }

    /**
     * This setups a javascript variable pageBase that can be used with other javascript code.
     * @param string $pageBase
     */
    public function setPageBase($pageBase)
    {
        $appWebBase = Ox_LibraryLoader::Config_Parser()->getAppConfigValue(Ox_Dispatch::CONFIG_WEB_BASE_NAME);
//        if (!empty($appWebBase)) {
//            $appWebBase .= '/';
//        }
        $this->_pageBase = $appWebBase . $pageBase;
    }

    /**
     * Adds the given script string to the list that will be output when the render is called.
     *
     * @param string $id
     * @param string $script
     */
    public function addHeaderScript ($id,$script) {
        $new = array($id=>$script);
        //This will overwrite if the same script id is used twice.
        $this->_js_script_list = array_merge($this->_js_script_list,$new);
        
    }

    /**
     * Adds the given script string to the list that will be output in the $(document).ready() when the render is called.
     *
     * @param string $id
     * @param string $script
     */
    public function addjQueryReady ($id,$script) {
        $new = array($id=>$script);
        //This will overwrite if the same script id is used twice.
        $this->_js_jQuery_ready_list = array_merge($this->_js_jQuery_ready_list,$new);
    }
    
    /**
     * Adds the given script string to the list that will be output in the $(window).load() when the render is called.
     *
     * @param string $id
     * @param string $script
     */
    public function addjQueryLoad ($id,$script) {
        $new = array($id=>$script);
        //This will overwrite if the same script id is used twice.
        $this->_js_jQuery_load_list = array_merge($this->_js_jQuery_load_list,$new);
    }
    
}
